package main

import (
	"crypto/sha512"
	"encoding/hex"
	"fmt"
	ledger "github.com/spacemeshos/go-ledger-sdk"
	"github.com/spacemeshos/ed25519"
)

func uint64_to_buf(value uint64) []byte {
	data := make([]byte, 8)
	data[0] = byte((value >> 56) & 0xff)
	data[1] = byte((value >> 48) & 0xff)
	data[2] = byte((value >> 40) & 0xff)
	data[3] = byte((value >> 32) & 0xff)
	data[4] = byte((value >> 24) & 0xff)
	data[5] = byte((value >> 16) & 0xff)
	data[6] = byte((value >>  8) & 0xff)
	data[7] = byte((value      ) & 0xff)
	return data
}

func main() {
/*
	if !ledger.Initialize() {
		return
	}
	defer ledger.Deinitialize()
*/
	devices := ledger.GetDevices(ledger.LedgerUSBVendorId, 0)
	for _, device := range devices {
		fmt.Printf("device: %+v\n", device.Info)
		if device.Info.UsagePage != 65440 {
			continue
		}
		fmt.Printf("open: %v\n", device.Open())
		fmt.Printf("version: %+v\n", device.GetVersion())
		publicKey := device.GetExtendedPublicKey(ledger.StringToPath("44'/540'/0'/0/0'"))
		fmt.Printf("public key: %+v\n", publicKey)
		fmt.Printf("address: %+v\n", device.GetAddress(ledger.StringToPath("44'/540'/0'/0/0'")))
		fmt.Printf("show address: %+v\n", device.ShowAddress(ledger.StringToPath("44'/540'/0'/0/1'")))

		tx := make([]byte, 0)
		var bin []byte
		bin, _ = hex.DecodeString("0000000000000000000000000000000000000000000000000000000000000000") // network id
		tx = append(tx, bin...)
		tx = append(tx, 0) // coin transaction with ed
		tx = append(tx, uint64_to_buf(1)...) // nonce
		bin, _ = hex.DecodeString("0000000000000000000000000000000000000000") // recepient
		tx = append(tx, bin...)
		tx = append(tx, uint64_to_buf(1000000)...) // gas limit
		tx = append(tx, uint64_to_buf(1000)...) // gas price
		tx = append(tx, uint64_to_buf(1000000000000)...) // amount
		tx = append(tx, publicKey.PublicKey...)

		response := device.SignTx(ledger.StringToPath("44'/540'/0'/0/0'"), tx)
		hash := sha512.Sum512(tx)
		fmt.Printf("Verify coin tx: %v\n", ed25519.Verify(publicKey.PublicKey, hash[:], response[1:65]))

		tx = make([]byte, 0)
		bin, _ = hex.DecodeString("0000000000000000000000000000000000000000000000000000000000000000") // network id
		tx = append(tx, bin...)
		tx = append(tx, 2) // exec app transaction with ed
		tx = append(tx, uint64_to_buf(1)...) // nonce
		bin, _ = hex.DecodeString("0000000000000000000000000000000000000000") // app address
		tx = append(tx, bin...)
		tx = append(tx, uint64_to_buf(1000000)...) // gas limit
		tx = append(tx, uint64_to_buf(1000)...) // gas price
		tx = append(tx, uint64_to_buf(1000000000000)...) // amount
		// call data
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		tx = append(tx, publicKey.PublicKey...)

		response = device.SignTx(ledger.StringToPath("44'/540'/0'/0/0'"), tx)
		hash = sha512.Sum512(tx)
		fmt.Printf("Verify app tx: %v\n", ed25519.Verify(publicKey.PublicKey, hash[:], response[1:65]))

		tx = make([]byte, 0)
		bin, _ = hex.DecodeString("0000000000000000000000000000000000000000000000000000000000000000") // network id
		tx = append(tx, bin...)
		tx = append(tx, 4) // spawn app + ed
		tx = append(tx, uint64_to_buf(1)...) // nonce
		bin, _ = hex.DecodeString("0000000000000000000000000000000000000000") // template address
		tx = append(tx, bin...)
		tx = append(tx, uint64_to_buf(1000000)...) // gas limit
		tx = append(tx, uint64_to_buf(1000)...) // gas price
		tx = append(tx, uint64_to_buf(1000000000000)...) // amount
		// call data
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		bin, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") // bin data
		tx = append(tx, bin...)
		tx = append(tx, publicKey.PublicKey...)

		response = device.SignTx(ledger.StringToPath("44'/540'/0'/0/0'"), tx)
		hash = sha512.Sum512(tx)
		fmt.Printf("Verify spawn tx: %v\n", ed25519.Verify(publicKey.PublicKey, hash[:], response[1:65]))
	}
}
